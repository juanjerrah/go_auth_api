basePath: /api
definitions:
  user.ChangePasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - email
    - new_password
    - old_password
    type: object
  user.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        enum:
        - admin
        - user
    required:
    - email
    - name
    - password
    - role
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  user.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        enum:
        - admin
        - user
    required:
    - role
    type: object
  user.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: seu-email@example.com
    name: Juan Jerrah
    url: https://github.com/juanjerrah
  description: API de autenticação e autorização com Go
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Auth API
  version: "1.0"
paths:
  /admin/users/{id}:
    get:
      description: Get a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /auth/logout:
    post:
      description: Invalidate current session token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: No active session
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/logout-all:
    post:
      description: Invalidate all user sessions
      produces:
      - application/json
      responses:
        "200":
          description: Logout from all devices successful
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout from all devices
      tags:
      - auth
  /auth/profile:
    get:
      description: Get authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      description: Get a new token with extended expiration
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Refresh authentication token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input data
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email already in use
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/sessions:
    get:
      description: Get list of active sessions for current user
      produces:
      - application/json
      responses:
        "200":
          description: Active sessions
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get active sessions
      tags:
      - auth
  /auth/validate:
    get:
      description: Check if authentication token is valid
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid token
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Validate token
      tags:
      - auth
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password by providing old and new passwords
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /users/profile:
    get:
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
